import "comparison"
import "functional"
import "io"
import "list"
import "tree"


def handle-error (e)
  if equal (error-value e) io.EOF then
    return true ""
    else
    raise e


def read-all-helper (accumulated)
  let eof value =
    guard
      handle-error
      lambda: list false (input "")

  if eof then
    return list.reverse accumulated

  return read-all-helper (prepend value accumulated)


def read-all ()
  return read-all-helper nil


export read-all


def fast-dict-compare (a b)
  let a-key a-value = a
  let b-key b-value = b
  return comparison.compare-any a-key b-key


export fast-dict-compare


def fast-dict-from-list (items)
  return tree.update-from-list-with-compare fast-dict-compare (tree.new) items


export fast-dict-from-list


def fast-dict-update-from-list (collection items)
  return tree.update-from-list-with-compare fast-dict-compare collection items


export fast-dict-update-from-list


def fast-dict-new ()
  return (tree.new)


export fast-dict-new


def fast-dict-set (collection key value)
  let item = list key value
  return tree.add-with-compare fast-dict-compare collection item


export fast-dict-set


def fast-dict-get-or-default (collection key default-value)
  return
    guard
      lambda e: default-value
      lambda:
        list.second
          tree.get-with-compare fast-dict-compare collection (list key nil)


export fast-dict-get-or-default


def fast-dict-iterator (collection)
  return tree.iterator collection


export fast-dict-iterator


def fast-dict-get (collection key)
  return
    list.second
      tree.get-with-compare fast-dict-compare collection (list key nil)


export fast-dict-get



def fast-dict-keys (collection)
  return
    functional.map-iterators
      lambda item: first item
      tree.iterator collection


export fast-dict-keys


def fast-dict-size (collection)
  let items =
    functional.map-iterators
      lambda item: item
      tree.iterator collection
  return list.length items


export fast-dict-size
