import "advent"
import "functional"
import "list"
import "string"


def delta-fold (state current)
  let previous accumulated = state
  let delta = sub current previous
  let next-accumulated = prepend delta accumulated
  return list current next-accumulated


def delta-sequence (numbers)
  let head tail ... = numbers
  let ignore deltas = functional.fold delta-fold tail (list head nil)
  let result = list.reverse deltas
  return result


def are-all-zeros (numbers)
  return
    list.all-test
      lambda n: equal n 0
      numbers


def get-layers (numbers accumulated)
  print "Getting layers" numbers "accumulated" accumulated
  if are-all-zeros numbers then
    return accumulated

  let next-numbers = delta-sequence numbers
  # let next-accumulated = prepend (list.reverse numbers) accumulated
  let next-accumulated = prepend numbers accumulated
  return get-layers next-numbers next-accumulated


def extrapolate (layers value)
  if not layers then
    return value

  let current remaining ... = layers
  let head = first current
  let forecast = sub head value
  print "Forecast value:" head "+" value
  return extrapolate remaining forecast


def handle-layer (layers)
  print "Forecasting" layers
  let forecast = extrapolate layers 0
  print "Found" forecast
  return forecast


def parse-line (line)
  let numbers-text = string.split line " "
  let numbers = map string.string-to-integer numbers-text
  let layers = get-layers numbers nil
  return layers


def main (args)
  let data = (advent.read-all)
  let all-layers = map parse-line data
  let forecasts = map handle-layer all-layers
  print forecasts
  let total = sum forecasts
  print total

  # # let numbers = 0 3 6 9 12 15
  # let numbers = 3 -3 -6 11 81 262 654 1429 2882 5527 10296 18955 34930 64825 120957 225074 412708 735639 1255391 2011191 2927270
  # let deltas = delta-sequence numbers
  # print deltas
  # let layers = get-layers numbers nil
  # print layers
  # let result = extrapolate layers 0
  # print result
  return 0
