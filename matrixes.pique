import "struct"
import "functional"
import "list"


struct matrix (shape transposed data)


def matrix-from-list (rows)
  let rows-count = list.length rows
  let columns-count = list.length (first rows)
  let items =
    functional.map-index
      lambda row-i row:
        functional.map-index
          lambda column-j value: list (list row-i column-j) value
          row
      rows
  let flat-items = list.extend-lists items
  let data-dict = dict.from-list flat-items
  let result =
    matrix
      shape = list rows-count columns-count
      transposed = false
      data = data-dict
  return result


def matrix-get (matrix row column)
  let key = list row column
  print "data is" (matrix-data matrix)
  let value = dict.get (matrix-data matrix) key
  return value



# def matmul (a b)


def main (args)
  let my-matrix = matrix-from-list (list (list 1 2) (list 3 4))
  print my-matrix
  let a = matrix-get my-matrix 1 0
  print a
  return 0
