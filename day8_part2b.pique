import "advent"
import "functional"
import "list"
import "string"


def unpack-assignments (var-name field-names)
  let prefixed =
    map
      lambda name: make-name var-name "." name
      field-names
  return
    template
      let { prefixed ... } = rest { var-name }


defmacro declare-unpack (struct-name)
  let func-name = make-name "unpack-" struct-name
  let metadata-func = make-name "fields-" struct-name
  return
    template
      defmacro { func-name } (var-name)
        defvar field-names =
          map
            first
            ({ metadata-func })
        return unpack-assignments var-name field-names


struct fixed-params (transitions instructions)
struct changing-params (position count)

declare-unpack fixed-params
declare-unpack changing-params



def step-one (all-transitions instruction position)
  let left right = advent.fast-dict-get all-transitions position
  let next-position =
    if equal instruction "L" then
      left
      else
      right
  # print "Stepping" position "by" instruction "to" next-position
  return next-position


let FOLD_DONE = make-name "fold-done-" (generate-name)


def fold-done (count)
  return list FOLD_DONE count


def is-position-ended (position)
  return string.ends-with position "Z"


def are-positions-ended (positions)
  return list.all-test is-position-ended positions


def cycle-all (fixed changing instruction)
  unpack-fixed-params fixed
  unpack-changing-params changing

  if is-position-ended changing.position then
    raise fold-done changing.count

  let next-position = step-one fixed.transitions instruction changing.position
  let next-count = add changing.count 1

  return
    update-changing-params
      changing
      position = next-position
      count = next-count


def loop-cycle (fixed changing)
  # Infinite loop
  let result =
    functional.fold
      functional.partial cycle-all fixed
      fixed-params-instructions fixed
      changing

  return loop-cycle fixed result


def codepoint-iter (the-string)
  let indexes = range (strlen the-string)
  let codepoints =
    map
      lambda i: substr the-string i (add i 1)
      indexes
  return codepoints


def parse-transition-line (line)
  # AAA = (BBB, CCC)
  let before after = string.split line "="
  let position = string.strip before
  let left right = string.split after ","
  let left-clean = substr left 2 (strlen left)
  let right-clean = substr right 1 (sub (strlen right) 1)
  return list position (list left-clean right-clean)


def parse-transitions (transition-lines)
  let items =
    map
      parse-transition-line
      transition-lines

  let transitions = advent.fast-dict-from-list items
  return transitions


def starting-positions (all-positions)
  return
    filter
      lambda s: string.ends-with s "A"
      all-positions


def get-frequency (fixed position)
  let changing =
    changing-params
      position = position
      count = 0

  let result =
    guard
      lambda e:
        block
          let error-kind count = error-value e
          if not-equal error-kind FOLD_DONE then
            raise e
            else
            return count
      lambda: loop-cycle fixed changing

  return result


# def lcd (frequencies)
#   let unique = set.values (set.from-list frequencies)



def main (args)
  let data = (advent.read-all)
  let instructions-line blank transition-lines ... = data
  let instructions = codepoint-iter instructions-line
  let transitions = parse-transitions transition-lines
  let positions = starting-positions (advent.fast-dict-keys transitions)

  print "Starting positions" positions

  """
  Figure out the harmonics for each starting point, on what
  period it will go from A to Z. Then try to find the
  greatest common demoniator for all of the frequencies.
  """

  let fixed =
    fixed-params
      transitions = transitions
      instructions = instructions

  let frequencies =
    map
      functional.partial get-frequency fixed
      positions

  print "Frequencies are" frequencies

  # let result = functional.fold mul frequencies 1
  # print "LCD is" result

  return 0
