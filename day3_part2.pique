import "advent"
import "comparison"
import "dict"
import "functional"
import "list"
import "set"
import "string"
import "tree"


def fast-dict-compare (a b)
  let a-key a-value = a
  let b-key b-value = b
  return comparison.compare-any a-key b-key


def fast-dict-from-list (items)
  return tree.update-from-list-with-compare fast-dict-compare (tree.new) items


def fast-dict-new ()
  return (tree.new)


def fast-dict-set (collection key value)
  let item = list key value
  return tree.add-with-compare fast-dict-compare collection item


def fast-dict-get-or-default (collection key default-value)
  return
    guard
      lambda e: default-value
      lambda:
        list.second
          tree.get-with-compare fast-dict-compare collection (list key nil)


def fast-dict-iterator (collection)
  return tree.iterator collection


def offset-coords (coords delta-x delta-y)
  let x y = coords
  return list (add x delta-x) (add y delta-y)


def neighbors (coords)
  let north = offset-coords coords 0 1
  let north-east = offset-coords coords 1 1
  let east = offset-coords coords 1 0
  let south-east = offset-coords coords 1 -1
  let south = offset-coords coords 0 -1
  let south-west = offset-coords coords -1 -1
  let west = offset-coords coords -1 0
  let north-west = offset-coords coords -1 1
  return list north north-east east south-east south south-west west north-west


def parse-schematic-line (y line)
  print "Handling schematic line" y
  let indexes = range (strlen line)
  let tuples =
    map
      lambda x:
        list
          list x y
          substr line x (add x 1)
      indexes
  return tuples


def make-schematic (data)
  let assignments = functional.map-index parse-schematic-line data
  let flattened = list.extend-lists assignments
  let schematic = fast-dict-from-list flattened
  return schematic


def string-codepoints (the-string)
  let indexes = range (strlen the-string)
  let codepoints =
    map
      lambda i: substr the-string i (add i 1)
      indexes
  return codepoints


let DIGITS = list "0" "1" "2" "3" "4" "5" "6" "7" "8" "9"


def is-digit (codepoint)
  let index = list.find DIGITS codepoint
  return not-equal index -1


struct part (number coords)


def save-parts (state tuple)
  let part-list numbers coords = state
  let current-coords current-codepoint = tuple

  # Digit is the start of a new part number or continuation of one
  if is-digit current-codepoint then
    return
      list
        part-list
        concat (list numbers current-codepoint)
        prepend current-coords coords

  # Non-digit is the end of a part if there's progress
  if numbers then
    let new-part =
      part (number = string.string-to-integer numbers) (coords = coords)
    return list (prepend new-part part-list) "" nil

  return state


def parse-part-line (y line)
  # Make sure all lines end with non-digit so the fold below can complete
  let tuples =
    parse-schematic-line
      y
      concat (list line ".")
  let start-state = list nil "" nil
  let final-state = functional.fold save-parts tuples start-state
  return first final-state


def index-part (parts-dict part)
  return
    functional.fold
      lambda state coords: fast-dict-set state coords part
      part-coords part
      parts-dict


def make-parts (data)
  let part-lines = functional.map-index parse-part-line data
  let flattened = list.extend-lists part-lines
  let parts-dict = functional.fold index-part flattened (fast-dict-new)
  return parts-dict


def check-gear (parts position)
  let gear-coords gear-value = position
  if not-equal gear-value "*" then
    return nil

  let neighbor-coords = neighbors gear-coords
  let maybe-parts =
    map
      lambda coords: fast-dict-get-or-default parts coords nil
      neighbor-coords
  let matching = filter bool maybe-parts
  let unique = set.values (set.from-list matching)

  print "Matching gears are" unique
  if not-equal (list.length unique) 2 then
    return 0

  let gear1 gear2 = unique
  let result = mul (part-number gear1) (part-number gear2)
  print "Result is" result
  return result


def find-gears (schematic parts)
  let maybe-gear-parts =
    functional.map-iterators
      functional.partial check-gear parts
      fast-dict-iterator schematic
  let gears-multiplied = filter bool maybe-gear-parts
  return gears-multiplied


def main (args)
  let data = (advent.read-all)
  let schematic = make-schematic data
  let parts = make-parts data
  let gears-multiplied = find-gears schematic parts
  let total = sum gears-multiplied
  print total
  return 0
