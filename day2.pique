"""
Which games would have been possible if the bag contained only 12 red cubes, 13
green cubes, and 14 blue cubes. What is the sum of the IDs of those games?
"""


import "advent"
import "dict"
import "functional"
import "string"


def split-helper (line delimiter delimiter-length accumulated)
  let index = string.find line delimiter
  if equal index -1 then
    let final-accumulated = prepend line accumulated
    return list.reverse final-accumulated

  let piece = substr line 0 index
  let next-line = substr line (add index delimiter-length) (strlen line)
  let next-accumulated = prepend piece accumulated
  return split-helper next-line delimiter delimiter-length next-accumulated


def split (line delimiter)
  let delimiter-length = strlen delimiter
  return split-helper line delimiter delimiter-length nil


def parse-amount (line)
  let number-text color = split line " "
  let number = string.string-to-integer number-text
  return list color number


def parse-colors (line)
  let colors-text = split line ", "
  let amounts = map parse-amount colors-text
  return dict.from-list amounts


def parse-sets (line)
  let sets-text = split line "; "
  let cube-sets = map parse-colors sets-text
  return cube-sets


def parse-id (line)
  let game-text after-id = split line ": "
  let game-prefix id-text = split game-text " "
  let id = string.string-to-integer id-text
  return list id after-id


def parse-line (line)
  let id after-id = parse-id line
  let cube-sets = parse-sets after-id
  return list id cube-sets


let MAXIMUMS = dict.from (list "red" 12) (list "green" 13) (list "blue" 14)


def check-amount (item)
  print "Checking amount" item
  let color amount = item
  let max = dict.get-or-default MAXIMUMS color 0
  print "Comparing" color amount "against max" max
  return less-equal amount max


def cube-set-valid (cube-set)
  let amounts-valid =
    functional.map-iterators check-amount (dict.iterator cube-set)
  print "Amounts valid" amounts-valid
  return all amounts-valid


def game-valid (game)
  let id cube-sets = game
  print "Game is" game
  let sets-valid = map cube-set-valid cube-sets
  if all sets-valid then
    return id
    else
    return nil


def handle-line (line)
  print "Handling" line
  let game = parse-line line
  return game-valid game


def main (args)
  let data = (advent.read-all)
  let maybe-game-ids = map handle-line data
  let game-ids = filter (lambda id: not-equal id nil) maybe-game-ids
  let result = sum game-ids
  print result
  return 0
