import "advent"
import "functional"
import "list"
import "string"


struct range-mapping (to from length)


def is-in-range (mapping from-number)
  let start = range-mapping-from mapping
  let end = add start (range-mapping-length mapping)  # Not inclusive

  if less-than from-number start then
    return false

  if greater-equal from-number end then
    return false

  return true


def translate-number (mapping from-number)
  if not (is-in-range mapping from-number) then
    raise list "Should not happen" mapping "with number" from-number

  let from-start = range-mapping-from mapping
  let delta = sub from-number from-start
  let to-start = range-mapping-to mapping
  let to-number = add delta to-start
  return to-number


def find-mapping (mapping-list from-number)
  let maybe-matches =
    filter
      lambda mapping: is-in-range mapping from-number
      mapping-list

  # When there's no match don't translate the number
  if not maybe-matches then
    return from-number

  if not-equal (list.length maybe-matches) 1 then
    raise "Found multiple matches for" from-number ":" maybe-matches "in" mapping-list

  let mapping = first maybe-matches
  return translate-number mapping from-number


struct data-section (header trailer)


def parse-line (state line)
  let all-sections pending = state

  # New section start
  if not pending then
    let next-section = data-section (header = line) (trailer = nil)
    return list all-sections next-section

  # Section end
  if not line then
    let next-sections = prepend pending all-sections
    return list next-sections nil

  # Section continuation
  let next-pending =
    data-section-set-trailer
      pending
      prepend line (data-section-trailer pending)
  return list all-sections next-pending


def pair-up (numbers accumulated)
  if not numbers then
    return accumulated

  let a b next-numbers ... = numbers
  let pair = list a b
  let next-accumulated = prepend pair accumulated
  return pair-up next-numbers next-accumulated


def map-iterator-next (map-func cursor)
  let item next-cursor = (cursor)
  let value = map-func item
  if next-cursor then
    let wrapper = lambda: map-iterator-next map-func next-cursor
    return list value wrapper

  return list value nil


def map-iterator (map-func cursor)
  if not cursor then
    return nil

  return lambda: map-iterator-next map-func cursor


def range-iterator-next (current length)
  let next-current = add current 1

  if equal next-current length then
    return list current nil

  let next-cursor = lambda: range-iterator-next next-current length
  return list current next-cursor


def range-iterator (length)
  if less-than length 0 then
    raise "Must be positive"

  if equal length 0 then
    return nil

  return lambda: range-iterator-next 0 length


def expand-range-iterator (pair)
  let start length = pair
  let cursor =
    map-iterator
      lambda v: add start v
      range-iterator length
  return cursor


def parse-seeds (sections)
  # Like "seeds: 79 14 55 13", but pairs of ranges
  let seed-sections =
    filter
      lambda section: string.starts-with (data-section-header section) "seeds:"
      sections
  if not-equal (list.length seed-sections) 1 then
    raise "Should only be one seed section" seed-sections

  let found = first seed-sections
  let before after = string.split (data-section-header found) ": "
  let numbers-text = string.split after " "
  let numbers = map string.string-to-integer numbers-text

  let pairs = pair-up numbers nil
  return pairs


def parse-mapping-range (line)
  let to from length = string.split line " "

  return
    range-mapping
      to = string.string-to-integer to
      from = string.string-to-integer from
      length = string.string-to-integer length


let DEPENDENCIES_CHAIN =
  list
    "seed-to-soil map:"
    "soil-to-fertilizer map:"
    "fertilizer-to-water map:"
    "water-to-light map:"
    "light-to-temperature map:"
    "temperature-to-humidity map:"
    "humidity-to-location map:"


def parse-mapping-section (section)
  let key = data-section-header section
  if equal (list.find DEPENDENCIES_CHAIN key) -1 then
    raise "Could not find mapping key" key

  let mapping-list =
    map
      parse-mapping-range
      data-section-trailer section

  print "parsed" key mapping-list

  return list key mapping-list


def parse-mappings (sections)
  let filtered =
    filter
      lambda section: not (string.starts-with (data-section-header section) "seeds:")
      sections
  let items =
    map
      parse-mapping-section
      filtered
  return dict.from-list items


def step-chain (step-dict step-index from-number)
  if greater-equal step-index (list.length DEPENDENCIES_CHAIN) then
    return from-number

  let step-name = list.index DEPENDENCIES_CHAIN step-index
  let mapping-list = dict.get step-dict step-name
  let to-number = find-mapping mapping-list from-number

  let next-step-index = add step-index 1
  return step-chain step-dict next-step-index to-number


def seed-iterator-next (step-dict min-number cursor)
  let from-number next-cursor = (cursor)
  let to-number = step-chain step-dict 0 from-number
  print "from" from-number "to" to-number

  let next-min-number =
    switch
      case (equal min-number nil)
        to-number
      case (less-than to-number min-number)
        to-number
      default
        min-number

  if not next-cursor then
    return list next-min-number nil

  let wrapper =
    lambda: seed-iterator-next step-dict next-min-number next-cursor
  return list next-min-number wrapper


def seed-iterator (step-dict pair)
  let cursor = expand-range-iterator pair
  if equal cursor nil then
    return nil

  return lambda: seed-iterator-next step-dict nil cursor


def drain-helper (last-item cursor)
  if not cursor then
    return last-item

  print "draining" last-item
  let next-item next-cursor = (cursor)
  return drain-helper next-item next-cursor


def drain (cursor)
  return drain-helper nil cursor


def main (args)
  let data = (advent.read-all)
  let sections ignore =
    functional.fold
      parse-line
      list.append data ""  # add a blank line so the fold ends
      list nil nil

  let seeds = parse-seeds sections
  let step-dict = parse-mappings sections

  let seed-cursors =
    map
      functional.partial seed-iterator step-dict
      seeds

  let seed-lowest = map drain seed-cursors
  print seed-lowest

  let lowest = min seed-lowest
  print lowest

  return 0
