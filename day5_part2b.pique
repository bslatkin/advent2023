import "advent"
import "functional"
import "list"
import "string"


# Start inclusive, end exclusive
struct span (start end)


def span-empty (the-span)
  let delta = sub (span-end the-span) (span-start the-span)
  return less-equal delta 0


def span-overlap (input-span filter-span)
  let input-start = span-start input-span
  let input-end = span-end input-span
  let filter-start = span-start filter-span
  let filter-end = span-end filter-span

  let below-length = max 0 (sub filter-start input-start)
  let below-end = add input-start below-length
  let overlap-end = max input-start (min input-end filter-end)

  let below =
    span
      start = input-start
      end = below-end

  let overlap =
    span
      start = below-end
      end = overlap-end

  let above =
    span
      start = overlap-end
      end = input-end


  return list below overlap above


struct translation (to from)


def translate-span (overlap to-span)
  let delta = sub (span-end to-span) (span-start to-span)
  return
    span
      start = add (span-start overlap) delta
      end = add (span-end overlap) delta


def maybe-translate (the-translation from-span)
  let filter-span = translation-from the-translation
  let below overlap above = span-overlap from-span filter-span
  print "From" from-span
  print "Below" below "overlap" overlap "above" above
  let translated-overlap =
    translate-span overlap (translation-to the-translation)
  print "Translated" translated-overlap
  return list below translated-overlap above


def translate-one (translation-list pending)
  if not pending then
    return nil

  if not translation-list then
    # If there are no more translations available then let the seeds pass
    # though without being moved.
    return pending

  let the-translation rest-translation ... = translation-list

  print "Translating" the-translation "to" pending

  let translations =
    map
      functional.partial maybe-translate the-translation
      pending

  let below = map (lambda t: list.index t 0) translations
  let overlap = map (lambda t: list.index t 1) translations
  let above = map (lambda t: list.index t 2) translations

  let next-pending =
    filter
      lambda s: not (span-empty s)
      list.extend below above

  print "Next pending" next-pending

  let pending-translations = translate-one rest-translation next-pending
  let all-translations = list.extend overlap pending-translations
  print "Overlap" overlap "pending" pending-translations
  return all-translations


def process-seeds (step-list pending)
  if not step-list then
    return
      filter
        lambda s: not (span-empty s)
        pending

  let step rest-steps ... = step-list
  let next-pending = translate-one step pending

  return process-seeds rest-steps next-pending


struct data-section (header trailer)


def parse-line (state line)
  let all-sections pending = state

  # New section start
  if not pending then
    let next-section = data-section (header = line) (trailer = nil)
    return list all-sections next-section

  # Section end
  if not line then
    let next-sections = prepend pending all-sections
    return list next-sections nil

  # Section continuation
  let next-pending =
    data-section-set-trailer
      pending
      prepend line (data-section-trailer pending)
  return list all-sections next-pending


def pair-up (numbers accumulated)
  if not numbers then
    return accumulated

  let a b next-numbers ... = numbers
  let pair = list a b
  let next-accumulated = prepend pair accumulated
  return pair-up next-numbers next-accumulated


def seed-pair (pair)
  let start length = pair
  return
    span (start = start) (end = (add start length))


def parse-seeds (sections)
  # Like "seeds: 79 14 55 13", but pairs of ranges
  let seed-sections =
    filter
      lambda section: string.starts-with (data-section-header section) "seeds:"
      sections
  if not-equal (list.length seed-sections) 1 then
    raise "Should only be one seed section" seed-sections

  let found = first seed-sections
  let before after = string.split (data-section-header found) ": "
  let numbers-text = string.split after " "
  let numbers = map string.string-to-integer numbers-text

  let pairs = pair-up numbers nil
  let seed-spans = map seed-pair pairs
  return seed-spans


def parse-mapping-range (line)
  let to-text from-text length-text = string.split line " "
  let to = string.string-to-integer to-text
  let from = string.string-to-integer from-text
  let length = string.string-to-integer length-text

  let to-span = span (start = to) (end = add to length)
  let from-span = span (start = from) (end = add from length)

  return translation (to = to-span) (from = from-span)


def parse-mapping-section (section)
  let key = data-section-header section
  let mapping-list =
    map
      parse-mapping-range
      data-section-trailer section

  print "parsed" key mapping-list

  return mapping-list


def parse-mappings (sections)
  let filtered =
    filter
      lambda section: not (string.starts-with (data-section-header section) "seeds:")
      sections
  let mapping-list =
    map
      parse-mapping-section
      filtered
  return mapping-list


def main (args)
  let data = (advent.read-all)

  # let seed = span (start = 79) (end = 80)
  # let filter = span (start = 52) (end = 100)
  # let result = span-overlap seed filter
  # print result

  # let seed = span (start = 127) (end = 128)
  # let filter = span (start = 0) (end = 15)
  # let result = span-overlap seed filter
  # print result

  let seed = span (start = 10) (end = 12)
  let filter = span (start = 15) (end = 18)
  let result = span-overlap seed filter
  print result


  # let sections ignore =
  #   functional.fold
  #     parse-line
  #     list.append data ""  # add a blank line so the fold ends
  #     list nil nil
  # let fixed-sections = list.reverse sections

  # let seeds = parse-seeds sections
  # let step-list = parse-mappings fixed-sections

  # let result = process-seeds step-list seeds
  # print result

  return 0
